import java.io.*;
import fabric.util.ArrayList;

// implementation of trie
public class Trie {

    // Alphabet size (# of symbols)
    static final int ALPHABET_SIZE = 26;

    // trie node
    static class TrieNode
    {
        public TrieNode children[];

        // isEndOfWord is true if the node represents
        // end of a word
        boolean isEndOfWord;

        TrieNode TrieNode$() {
            fabric$lang$Object$();
            isEndOfWord = false;
            this.children =  new TrieNode[ALPHABET_SIZE];
            //for (int i = 0; i < ALPHABET_SIZE; i++)
            //    children[i] = null;
            return this;
        }
    }

    static TrieNode root;

    /** If not present, inserts key into trie
    * If the key is prefix of trie node,
    * just marks leaf node
    */
    public static void insert(String key)
    {
        int level;
        int length = key.length();
        int index;

        TrieNode pCrawl = root;

        for (level = 0; level < length; level++)
        {
            index = key.charAt(level) - 'a';
            if (pCrawl.children[index] == null)
                pCrawl.children[index] = new TrieNode().TrieNode$();;

            pCrawl = pCrawl.children[index];
        }

        // mark last node as leaf
        pCrawl.isEndOfWord = true;
    }

    // Returns true if key presents in trie, else false
    public static boolean search(String key)
    {
        int level;
        int length = key.length();
        int index;
        TrieNode pCrawl = root;

        for (level = 0; level < length; level++)
        {
            index = key.charAt(level) - 'a';

            if (pCrawl.children[index] == null)
                return false;

            pCrawl = pCrawl.children[index];
        }

        return (pCrawl != null && pCrawl.isEndOfWord);
    }

    // Driver
    public static boolean createDict(ArrayList wordsToCheck)
    {
        ArrayList words = new ArrayList().fabric$util$ArrayList$();

        File file = new File("/Users/karannewatia/Documents/GitHub/Fabric_Scrabble/fabil_scrabble/src/simple_dict.txt");

        try {
          FileReader fileReader = new FileReader(file);
          BufferedReader reader = new BufferedReader(fileReader);
         String line = reader.readLine();
         while (line != null) {
            words.add(line);
            // read next line
            line = reader.readLine();
          }
          reader.close();
        } catch (Exception e ) {
            e.printStackTrace();
          }

        root = new TrieNode().TrieNode$();

        // Construct trie
        for (int i = 0; i < words.size(); i++){
            String temp = (String) words.get(i);
            insert(temp);
        }

        for (int j = 0; j < wordsToCheck.size(); j++){
            String temp = (String) wordsToCheck.get(j);
            if (!search(temp)) return false;
        }

        return true;

      }
}
