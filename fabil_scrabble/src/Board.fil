import fabric.util.ArrayList;
import fabric.util.Arrays;
import fabric.util.HashMap;
//import java.io.*;

/**
 * This class represents a board in the Scrabble game.
 *.
 */
public class Board {

    public ArrayList[] gameBoard;
    public int moveNumber;
    public HashMap points;

    public Board Board$(){
      fabric$lang$Object$();
      this.moveNumber = 0;

      this.gameBoard  = new ArrayList[15];
      this.points = new HashMap().fabric$util$HashMap$();

      for (int i=0; i<15; i++) {
         	this.gameBoard[i] = new ArrayList().fabric$util$ArrayList$();
      }

      for (int i=0; i<15; i++) {
          for (int j=0; j<15; j++) {
              (this.gameBoard[i]).add(" ");
					    //(this.gameBoard.get(i))[j] = " ";
        }
      }

      this.setPoints();


      return this;
    }

    /**
    * Sets up the number of points that each tile corresponds to
    */
    public void setPoints(){
      atomic{

        this.points.put("a", new Integer(1));
        this.points.put("e", new Integer(1));
        this.points.put("i", new Integer(1));
        this.points.put("l", new Integer(1));
        this.points.put("n", new Integer(1));
        this.points.put("o", new Integer(1));
        this.points.put("r", new Integer(1));
        this.points.put("s", new Integer(1));
        this.points.put("t", new Integer(1));
        this.points.put("u", new Integer(1));

        this.points.put("d", new Integer(2));
        this.points.put("g", new Integer(2));

        this.points.put("b", new Integer(3));
        this.points.put("c", new Integer(3));
        this.points.put("m", new Integer(3));
        this.points.put("p", new Integer(3));

        this.points.put("f", new Integer(4));
        this.points.put("h", new Integer(4));
        this.points.put("v", new Integer(4));
        this.points.put("w", new Integer(4));
        this.points.put("y", new Integer(4));

        this.points.put("k", new Integer(5));

        this.points.put("j", new Integer(8));
        this.points.put("x", new Integer(8));

        this.points.put("q", new Integer(10));
        this.points.put("z", new Integer(10));

        this.points.put("*", new Integer(0));
      }

    }

    /**
    * Returns true if word is present in the Scrabble dictionary,
    * and false otherwise
    */
    private boolean validateWord(String word){
      return Trie.createDict(word);
    }

    /**
    * Returns the tile present in the row, column pair input on the board
    */
    public String getTileOnBoard(int row, int col) {
      if (row<=0) row = 0;
      if (col<=0) col = 0;
      if (row>=14) row = 14;
      if (row>=14) col = 14;
      String tile = (String) (this.gameBoard[row]).get(col);
      return tile;
    }

    /**
    * Returns the letters on the board starting from the row, column pair given
    * in the given direction using letter
    */
    private String constructWord(int row, int col, String letter, boolean direction) {
        StringBuilder newWord = new StringBuilder();
        int start;
        int end;
        int i = 1;
        int j = 1;

        if (direction) {

            while (col-j >= 0 && !this.getTileOnBoard(row, col-j).equals(" ")) {
                j++;
            }
            start = col-j+1;
            j = 1;

            while (col+j <= 14 && !this.getTileOnBoard(row, col+j).equals(" ")) {
                j++;
            }
            end = col+j-1;

            for (int newCol=start; newCol<=end;  newCol++) {
                if (newCol == col) {    newWord.append(letter);                  }
                else {  newWord.append(this.getTileOnBoard(row, newCol));  }
            }

            return newWord.toString().trim();

        } else {

            while (row-i >= 0 && !this.getTileOnBoard(row-i, col).equals(" ")) {
                i++;
            }
            start = row-i+1;
            i = 1;

            while (row+i <= 14 && !this.getTileOnBoard(row+i, col).equals(" ")) {
                i++;
            }
            end = row+i-1;

            for (int newRow = start; newRow <= end; newRow++) {
                if (newRow == row) {    newWord.append(letter);                  }
                else {  newWord.append(this.getTileOnBoard(newRow, col));  }
            }

            return newWord.toString().trim();
        }
    }

    /**
    * Returns the adjacent words on the board starting from the
    * given row, column pair in the given direction using word
    */
    public ArrayList getAdjWords(String word,boolean dir, int row, int col) {
        ArrayList adjWords = new ArrayList().fabric$util$ArrayList$();

        for (int i=0; i<word.length(); i++) {
            if (dir) {
                if (this.getTileOnBoard(row, col+i).equals(" ")) {

                    if (!this.getTileOnBoard(row-1, col+i).equals(" ")||
                            !this.getTileOnBoard(row+1, col+i).equals(" ")) {
                        adjWords.add(this.constructWord(row, col+i ,Character.toString(word.charAt(i)), dir));
                    }
                }
                for(int j =0; j<word.length();j++){
                  if (!this.getTileOnBoard(row-1,col+j).equals(" ")){
                    adjWords.add(this.constructWord(row-1, col+j ,this.getTileOnBoard(row-1, col +j), !dir));
                  }
                  if (!this.getTileOnBoard(row+1,col+j).equals(" ")){
                    adjWords.add(this.constructWord(row+1, col+j ,this.getTileOnBoard(row+1, col +j), !dir));
                  }
                }
            } else {
                if (this.getTileOnBoard(row+i, col).equals(" ")) {
                    if (!this.getTileOnBoard(row+i, col-1).equals(" ") ||
                            !this.getTileOnBoard(row+i, col+1).equals(" ")) {
                        adjWords.add(this.constructWord(row+i, col, Character.toString(word.charAt(i)), dir));
                    }
                }
                for(int j =0; j<word.length();j++){
                  if (!this.getTileOnBoard(row+j,col-1).equals(" ")){
                    adjWords.add(this.constructWord(row+j, col-1 ,this.getTileOnBoard(row+j, col -1), !dir));
                  }
                  if (!this.getTileOnBoard(row+j,col+1).equals(" ")){
                    adjWords.add(this.constructWord(row+j, col+1 ,this.getTileOnBoard(row+j, col+1), !dir));
                  }
                }
            }
        }

        return adjWords;
    }

    /**
    * Returns true if all words in list are present in the Scrabble dictionary,
    * and false otherwise
    */
    private boolean validateAdjWords(ArrayList list) {
      for(int i=0; i<list.size();i++){
        String str = (String) list.get(i);
        if (!this.validateWord(str)) {
            System.out.println(str + " not valid secondary word.");
            return false;
        }
      }
      return true;
    }

    /**
    * Helper function for hasTilesinRack
    */
    private boolean tileHelper(String word, String rackCopy){
      if (word.length() == 0 ) return true;

      if(rackCopy.indexOf(word.charAt(0)) !=-1){
        int idx = rackCopy.indexOf(word.charAt(0));
        String newRack = rackCopy.substring(0, idx) + rackCopy.substring(idx + 1);
        String newWord = word.substring(1);
        return tileHelper(newWord, newRack);
      }
      else if (rackCopy.indexOf("*") !=-1){
        String newRack = rackCopy.substring(0, rackCopy.indexOf("*")) + rackCopy.substring(rackCopy.indexOf("*") + 1);
        String newWord = word.substring(1);
        return tileHelper(newWord, newRack);
      }
      else return false;
    }

    /**
    * Returns true if player has the tiles to play word in his/her rack,
    * and false otherwise
    */
    private boolean hasTilesinRack(Player player, String word) {
      String rackCopy = player.getRack();
      if (rackCopy.length() < word.length() ) return false;
      return tileHelper(word, rackCopy);
    }

    /**
    * Returns true if the given inputs form a valid placeWord move on the board,
    * and false otherwise
    */
    public boolean isMoveValid(Player player, String word, String newEntries, boolean dir, int row, int col) {

        String rackCopy = player.getRack();
        if (!hasTilesinRack(player, newEntries)){
          System.out.println("isMoveValid err: : Letters not in rack. Invalid move!");
          return false;
        }

        boolean tilesPresent = false;

        // DOES THE BOARD OVERFLOW
        if ((dir&& (col + word.length() > 14)) ||
                (!dir && (row + word.length() > 14))) {
            System.out.println("isMoveValid err: : Board overflow. Invalid move!");
            return false;
        }

        // IS THE WORD VALID USING A DICT
        if (!this.validateWord(word)) {
            System.out.println("isMoveValid err: This word doesn't exist.");
            return false;
        }

        // INTENDED WORD SHOULD BE THE LARGEST CONTIGUOUS STRING IN THAT DIRECTION
        if (dir) {
            if (!this.getTileOnBoard(row, col+word.length()+1).equals(" ")||
                    (col-1>0 && !this.getTileOnBoard(row, col-1).equals(" "))) {
                System.out.println("isMoveValid err: Incomplete input word ");
                return false;
            }
        } else {
            if (!this.getTileOnBoard(row+word.length()+1, col).equals(" ")||
                    (row-1>0 && !this.getTileOnBoard(row-1, col).equals(" "))) {
                System.out.println("Incomplete input word");
                return false;
            }
        }

        // DOES THE FIRST MOVE CROSS THE BOARD CENTER
        if (this.moveNumber == 0) {
            if ((dir&& (col + word.length() < 7)) ||
                    (!dir && (row + word.length() < 7)) ||
                    (row > 7 && col > 7)) {
                System.out.println("isMoveValid err: First move should touch the board center!");
                return false;
            }
        }

        // DOES THE SECOND (or greater) MOVE TOUCH ONE OF THE EXISTING TILES
        if (this.moveNumber >= 1) {
            for (int i=0; i<word.length(); i++) {
                if (dir) {
                    if (!this.getTileOnBoard(row, col+i).equals(" "))    {   tilesPresent = true;    }
                } else {
                    if (!this.getTileOnBoard(row+i, col).equals(" "))    {   tilesPresent = true;    }
                }
            }
            if (!tilesPresent)  {
                System.out.println("isMoveValid err: New word has to touch an existing word");
                return false;
            }
        }

        // ARE SECONDARY WORDS VALID IF THEY EXIST
        ArrayList adjList = this.getAdjWords(word, dir, row, col);
        if (!this.validateAdjWords(adjList)) {
            System.out.println("isMoveValid err: The other words you tried to create are invalid. Sorry!");
            return false;
        }

        return true;
    }

    /**
    * Returns the tiles in word that are not already present on the board
    */
    public String getNewEntries(String word, boolean isHorizontal, int row, int col) {
      ArrayList newTiles = new ArrayList().fabric$util$ArrayList$();
      if (isHorizontal){
        for(int i=0; i< word.length(); i++){
          String temp = Character.toString(word.charAt(i));
          if(this.getTileOnBoard(row, i + col).equals(temp)){
            continue;
          }
          else if (!this.getTileOnBoard(row, i + col).equals(" ")){
            newTiles.add(temp);
          }
          else {
            newTiles.add("#");
          }
        }
      }
      else{
        for(int j=0; j< word.length(); j++){
          String temp = Character.toString(word.charAt(j));
          if(this.getTileOnBoard(row + j, col).equals(temp) ){
            continue;
          }
          else if (!this.getTileOnBoard(row + j, col).equals(" ")){
            newTiles.add(temp);
          }
          else {
            newTiles.add("#");
          }
        }
      }

      String result = "";
      for(int i =0; i< newTiles.size();i++){
        result += (String) newTiles.get(i);
      }
      return result;
    }

    /**
    * Places word on the board using the given inputs
    */
    public void placeWord(Player player, String word, boolean isHorizontal, int row, int col){

         atomic{
         if (isHorizontal){
           for (int i =0; i< word.length(); i++){
             String temp = Character.toString(word.charAt(i));
             (this.gameBoard[row]).set(col+1, temp);
           }
         }
         else{
           for (int j =0; j< word.length(); j++){
             String temp = Character.toString(word.charAt(j));
             (this.gameBoard[row + j]).set(col, temp);
           }
         }
       }
    }

    /**
    * Increments the score of player based on tiles
    */
    public void incScore(Player player, String[] tiles){
      atomic{
        for(int i =0; i< tiles.length; i++){
          int temp = Integer.parseInt(this.points.get(tiles[i]).toString());
          player.score = player.score + temp;
        }
      }
    }
}
