import fabric.util.ArrayList;
import java.io.*;

/**
 * The class Scrabble is responsible for coordinating gameplay
 * between two Players.
 */
public class Scrabble {

  private Player[] players;
  private Bag bag;
  private int currentTurn;
  private Board board;

  public Scrabble Scrabble$(Player p1, Player p2){
    fabric$lang$Object$();
    this.bag = new Bag().Bag$();
    this.board = new Board().Board$();
    this.currentTurn = 0;
    this.players = new Player[2];
    this.players[0] = p1;
    this.players[1] = p2;
    return this;

  }

  public void joinGame(){

    Player alice = new Player().Player$();
    Player bob = new Player().Player$();
    atomic{
      this.players[0] = alice;
      this.players[1] = bob;
    }
  }

  public void startGame(){
    atomic{
      this.bag.populateBag();
      for(int i=0; i<this.players.length;i++){
        this.players[i].rack.populateRackTile(this.bag);
      }
    }
  }

  public String[] stringToStringArray(String word) {
    String[] result = new String[word.length()];
    for(int i=0; i<word.length(); i++){
       result[i] = Character.toString(word.charAt(i));
    }
		return result;
	}

  public boolean move(int currentPlayer){
    atomic{
      boolean success = false;
      try{
      BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
      System.out.println("Player " + currentPlayer + "'s turn \n");
      System.out.println("Score: " + this.players[currentPlayer].score + "\n");
      System.out.println("Rack: " + this.players[currentPlayer].getRack() + "\n");

      while(!success) {
        System.out.println("place or swap or pass \n");
        String moveType = reader.readLine();

        if (moveType.equals("swap")){
          System.out.println("which letters do you want to swap \n");
          String word = reader.readLine();
          String[] letters = this.stringToStringArray(word);
          this.players[currentPlayer].rack.swapTiles(letters, this.bag);
          currentPlayer = (currentPlayer + 1) % 2;
          success = true;
          return success;
        }

        else if (moveType.equals("place")){

          while(!success) {
            System.out.println(" word formed \n");
            String word = reader.readLine();
            System.out.println(" h or v \n");
            String dirString = reader.readLine();
            boolean dir = true;
            if (dirString.equals("v")){
              dir = false;
            }
            System.out.println(" startRow \n");
            String rowString = reader.readLine();
            System.out.println(" startCol \n");
            String colString = reader.readLine();
            int row = Integer.parseInt(rowString);
            int col = Integer.parseInt(colString);

            String newEntries = this.board.getNewEntries(word, dir, row, col);
            if (this.board.isMoveValid(this.players[currentPlayer], word, newEntries, dir, row, col)){
              this.board.placeWord(this.players[currentPlayer], word, dir, row, col);
              this.board.incScore(this.players[currentPlayer], stringToStringArray(newEntries));
              this.players[currentPlayer].rack.swapTiles(stringToStringArray(newEntries), this.bag);
              currentPlayer = (currentPlayer + 1) % 2;
              this.board.moveNumber++;
              success = true;
              return success;
            }

            else {
            System.out.println("invalid place, try again");
            return success;
            }
        }
      }

        else if (moveType.equals("pass")){
          success = true;
          System.out.println("turn passed");
          return success;
        }

        else{
          System.out.println("try again");
          return success;
        }
      }

      //System.out.println(moveType);
     } catch (IOException ioe) {
       ioe.printStackTrace();
     }
     return success;
    }
  }

  public void gameLoop(){
    atomic{
      int currentPlayer = 0;
      while(this.board.moveNumber < 50 && this.bag.tiles.size() > 0){
        System.out.print("  "); //beginning 2 spaces
        for(int i = 0; i < this.board.gameBoard.length; ++i){
          if(i>9) System.out.print(" " + (i) +" "); //print letters separately.
          else System.out.print(" " + (i) +"  "); //print letters separately.
        }

        for(int i = 0; i < this.board.gameBoard.length; i++){
        System.out.println();
        for(int j = 0; j < this.board.gameBoard.length; j++){
            if(j == 0){
                if(i>9) {
                System.out.print((i));
                System.out.print("| ");
              }
              else {
                System.out.print(" "+ (i));
                System.out.print("| ");
              }
            }
            System.out.println((String)(this.board.gameBoard[i].get(j)) + " | ");
          }
       }
       //System.out.printf("%n");
       boolean success = false;
       while (!success){
          success = this.move(currentPlayer);
       }

      currentPlayer = (currentPlayer + 1) % 2;
      this.board.moveNumber++;
      }
    }

  }

}
