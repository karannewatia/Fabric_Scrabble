import fabric.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.Box;

/**
 * The class Scrabble is responsible for coordinating gameplay
 * between two Players.
 */
public class Scrabble {

  private ArrayList players;
  private Bag bag;
  private int currentPlayer;
  private Board board;

  public Scrabble Scrabble$(ArrayList playersList){
    fabric$lang$Object$();
    this.bag = new Bag().Bag$();
    this.board = new Board().Board$();
    this.currentPlayer = 0;
    this.players = new ArrayList().fabric$util$ArrayList$();
    for (int i =0; i<playersList.size();i++){
      this.players.add(playersList.get(i));
    }
    return this;

  }

  /**
  * Initializes the Bag, and the racks of all players in this Scrabble game
  */
  public void startGame(){
    atomic{
      this.bag.populateBag();
      for(int i=0; i<this.players.size();i++){
        ((Player) this.players.get(i)).rack.populateRackTile(this.bag);
      }
    }
  }

  /**
  * Converts word, which is a string, to a string array
  */
  public String[] stringToStringArray(String word) {
    String[] result = new String[word.length()];
    for(int i=0; i<word.length(); i++){
       result[i] = Character.toString(word.charAt(i));
    }
		return result;
	}

  /**
  * remote call for the move function
  */
  public boolean move_remote(fabric.lang.security.Principal p) {
     return this.move();
  }

  /**
  * GUI for swap
  */
  public String swap_gui(){
    JFrame frame = new JFrame("Input Dialog 2");
    String word = JOptionPane.showInputDialog(frame, "which letters do you want to swap?");
    return word;
  }

  /**
  * helper function for the swap move for a player
  */
  public boolean swap(){
    boolean success = false;

    String word = this.swap_gui();
    String[] letters = this.stringToStringArray(word);
    atomic{
      ((Player) this.players.get(this.currentPlayer)).rack.swapTiles(letters, this.bag);
      success = true;
      return success;
    }
  }

  /**
  * helper function for the place move for a player
  */
  public boolean place(){

    boolean success = false;

    JTextField wordField = new JTextField(15);
    JTextField directionField = new JTextField(2);
    JTextField rowField = new JTextField(3);
    JTextField colField = new JTextField(3);
    JPanel myPanel = new JPanel();
    myPanel.add(new JLabel("word formed:"));
    myPanel.add(wordField);
    myPanel.add(Box.createHorizontalStrut(10)); // a spacer
    myPanel.add(new JLabel("direction(h or v):"));
    myPanel.add(directionField);
    myPanel.add(Box.createHorizontalStrut(10)); // a spacer
    myPanel.add(new JLabel("start row:"));
    myPanel.add(rowField);
    myPanel.add(Box.createHorizontalStrut(10)); // a spacer
    myPanel.add(new JLabel("start column:"));
    myPanel.add(colField);

   int result = JOptionPane.showConfirmDialog(null, myPanel,
            "Please fill in", JOptionPane.OK_CANCEL_OPTION);

    if (result == JOptionPane.OK_OPTION) {
       String word = wordField.getText();
       boolean dir = true;
       String dirString = directionField.getText();
       if (dirString.equals("v")){
         dir = false;
       }
       String rowString = rowField.getText();
       String colString = colField.getText();
       int row = Integer.parseInt(rowString);
       int col = Integer.parseInt(colString);

       // Now try to place it
       String newEntries = this.board.getNewEntries(word, dir, row, col);
       String swap = this.board.swapTiles((Player)this.players.get(this.currentPlayer), newEntries);

       atomic{
         if (this.board.isMoveValid((Player)this.players.get(this.currentPlayer), word, newEntries, dir, row, col)){
           this.board.placeWord((Player)this.players.get(this.currentPlayer), word, dir, row, col);
           this.board.incScore((Player)this.players.get(this.currentPlayer), stringToStringArray(swap));
           ((Player)this.players.get(this.currentPlayer)).rack.swapTiles(stringToStringArray(swap), this.bag);

           this.board.moveNumber++;
           success = true;
           return success;
         }
         else {
         return false;
       }
      }
    }
    return false;
  }

  /**
  * Helper function move.
  * calls the relevant functions using moveType
  */
  public boolean moveHelper(String moveType){

    boolean success = false;
    atomic{
      if (moveType.equals("swap")){
        return this.swap();
      }
      else if (moveType.equals("place")){
        return this.place();
      }
      else if (moveType.equals("pass")){
        success = true;
        System.out.println("turn passed");
        return success;
      }
      else{
        System.out.println("try again");
        return success;
      }
    }

  }

  /**
  * GUI for asking for the type of move
  */
  public String move_gui(){
    JFrame frame = new JFrame("Input");
    String moveType = JOptionPane.showInputDialog(frame, "Player " + this.currentPlayer + "'s turn: place or swap or pass?");
    return moveType;
  }

  /**
  * This functions asks the user to enter the type of move he/she wants to play.
  */
  public boolean move(){
    this.readBoard(this.currentPlayer);

    String moveType = this.move_gui();

    if (moveType==null) return false;

    if (moveHelper(moveType)==true){
       //this.print_helper();
       return true;
    }
    return false;
    }

  /**
  *  remote call for readBoard
  */
  public void readBoard_remote(fabric.lang.security.Principal p, int playerNum) {
    this.readBoard(playerNum);
  }

  /**
  * Prints the game board for every turn
  */
  public void readBoard(int playerNum){
    atomic{
      System.out.println("\n");
      System.out.print("  "); //beginning 2 spaces
      for(int i = 0; i < this.board.gameBoard.length; ++i){
        if(i>9) System.out.print(" " + (i) +" "); //print letters separately.
        else System.out.print(" " + (i) +"  "); //print letters separately.
      }
      for(int i = 0; i < this.board.gameBoard.length; i++){
        System.out.println();
        for(int j = 0; j < this.board.gameBoard.length; j++){
            if(j == 0){
                if(i>9) {
                  System.out.print((i));
                  System.out.print("| ");
                } else {
                  System.out.print(" "+ (i));
                  System.out.print("| ");
                }
            }
            System.out.print((String)(this.board.gameBoard[i].get(j)) + " | ");
          }
        }
        System.out.println("\n" + "\n" + "Player " + this.currentPlayer + "'s turn \n");
        System.out.println("Your score: " + ((Player)this.players.get(playerNum)).score + "\n");
        System.out.println("Your rack: " + ((Player)this.players.get(playerNum)).getRack() + "\n");
    }
  }

  /**
  * Returns true if any player has an empty rack,
  * and false otherwise
  */
  public boolean emptyRack(){
     for (int i=0; i<this.players.size(); i++){
        if(((Player)this.players.get(i)).rack.tiles.size()==0) return true;
     }
     return false;
  }


  /**
  * Returns the player who has the highest score,
  */
  public int getWinner(){
     int highScore = ((Player)this.players.get(0)).score;
     int winner = 0;

     for (int i=1; i<this.players.size(); i++){
        if(((Player)this.players.get(i)).score > highScore){
          highScore = ((Player)this.players.get(i)).score;
          winner = i;
        }
     }
     return winner;
  }

  /**
  * Runs the Scrabble game
  * the game ends when the number of moves played is equal to 50
  */
  public void gameLoop(){
    atomic{
      while(this.board.moveNumber < 50){
         if (this.emptyRack()){
            int winner = this.getWinner();
            System.out.println("The winner is player " + (winner) );
            break;
         }
         else{
          // this.print_helper();
           boolean success = false;
           RemoteWorker w1  = ((Player)this.players.get(this.currentPlayer)).w;
           RemoteWorker w2  = ((Player)this.players.get((this.currentPlayer + 1) % this.players.size())).w;

           while (!success){
             // Remote call
              int temp = (this.currentPlayer + 1) % this.players.size();
              this.readBoard_remote@w2(Worker.getWorker().getPrincipal(), temp);
              success = this.move_remote@w1(Worker.getWorker().getPrincipal());
             //success = this.move();
           }
          this.currentPlayer = (this.currentPlayer + 1) % this.players.size();
         }
      }
      int winner = this.getWinner();
      System.out.println("The winner is player " + (winner) );
    }
  }

}
