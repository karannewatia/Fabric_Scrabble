import fabricated.util.ArrayList;
import fabricated.util.StringComparator;

/**
 * This class represents a player's rack in the Scrabble game.
 */
public class Rack[principal Game, principal Player] authority(Game){

    public String{Game->Player; Game<-}[]{Game<-} tiles;

    public Rack{Game<-}(){
      this.tiles = new String[7];
    }


   /**
    * Initializes the rack with 7 random tiles
    */
    public void populateRackTile{Game<-}(Bag[Game]{Game<-} bag)
    // This should only be called by code that has the Game server's authority
    where authority (Game) {

      atomic{
        for(int i=0; i < 7; i++){
          try {
            String{Game->Player; Game<-} temp = declassify(bag.getTilePlayer(Player), {Game->;Game<-} to {Game->Player;Game<-});
            //tiles.add(temp);
            this.tiles[i] = temp;
            // Change the below to log an error or something to avoid making a bug
            // go silently unnoticed
          } catch (Exception e) { /*Shouldn't be possible*/ }

        }
      }
    }


   /**
   * Replaces the input tile with a random tile drawn from Bag
   */
    private void swapTile{Game<-}(String{Game<-; Game->Player} tile, Bag[Game]{Game<-} bag)
    // This should only be called by code that has the Game server's authority
    where authority (Game) {
      atomic{
         int idx = -1;
         for (int i = 0; i < this.tiles.length; i++) {
          if ((this.tiles[i]).equals(tile)) {
             idx = i;
           }
          }
          if (idx != -1) {
          //try {
              idx = idx;
              //String{Game->Player; Game<-} newTile = bag.swapTile(tile, Player);
              //this.tiles[idx] = newTile;
              // Change the below to log an error or something to avoid making a bug
              // go silently unnoticed
            //} catch (Exception e) { /*Shouldn't be possible*/ }
        }
      }
    }

    /**
    * Replaces all tiles in tileList with random tiles drawn from Bag
    */
    public void swapTiles{Game<-}(String[]{Game<-; Game->Player} tileList, Bag[Game]{Game<-} bag)
    // This should only be called by code that has the Game server's authority
    where authority (Game) {
      atomic{
        for(int i=0; i < 7; i++){
         this.swapTile(tileList[i], bag);
        }
      }
    }

}
