//import java.io.*;
import fabricated.util.ArrayList;

// implementation of trie
public class Trie[principal Game] {

    public TrieNode[Game]{Game<-} root;

    public Trie{Game<-}(){
      this.root = new TrieNode{Game<-}();
    }

    /** If not present, inserts key into trie
    * If the key is prefix of trie node,
    * just marks leaf node
    */
    public void insert{Game<-}(String{Game<-} key)
    {
        int level;
        int length = key.length();
        int index;

        TrieNode[Game]{Game<-} pCrawl = this.root;

        for (level = 0; level < length; level++)
        {
            index = key.charAt(level) - 'a';
            if (pCrawl.children[index] == null)
                pCrawl.children[index] = new TrieNode[Game]();

            pCrawl = pCrawl.children[index];
        }

        // mark last node as leaf
        pCrawl.isEndOfWord = true;
    }

    // Returns true if key presents in trie, else false
    public boolean{} search{Game<-}(String{Game<-} key)
    {
        int level;
        int length = key.length();
        int index;
        TrieNode[Game]{Game<-} pCrawl = this.root;

        for (level = 0; level < length; level++)
        {
            index = key.charAt(level) - 'a';

            if (pCrawl.children[index] == null)
                return false;

            pCrawl = pCrawl.children[index];
        }

        return (pCrawl != null && pCrawl.isEndOfWord);
    }


}
