import fabfx.application.Application;
import fabfx.stage.Stage;
import fabfx.scene.*;
import fabfx.scene.layout.*;
import fabfx.collections.ObservableList;
import fabfx.scene.text.Text;
import fabfx.event.EventHandler;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.animation.KeyValue;
import fabfx.animation.KeyFrame;
import fabfx.animation.Timeline;
import javafx.util.Duration;
import fabric.util.java.Object2DArray;
import fabfx.scene.shape.Rectangle;
import fabric.util.PrintString;
import fabricated.util.ArrayList;
import fabricated.util.StringComparator;
import fabricated.util.IdComparator;


public class Gui extends Application authority(User){

	public Color{User<-} numColor;
	public Color{User<-} tileColor;
	public Color{User<-} sepColor;
	public Font{User<-} numFont;
	public Font{User<-} smallNumFont;
	public double{User<-} tileSize = 120.0;
	public double{User<-} gutter;
	public Color{User<-} native []{User<-} colors;
	public Rectangle[{User<-},{User<-}]{User<-} background;

	//public Scrabble[User] scrabble;

	// The nodes corresponding to each of the tiles of the game
	//private Object2DArray[{User<-}]{User<-} tiles;

	public void run{User<-} (Stage{User<-} primaryStage) where caller(User) {
		atomic {
    try{

				final label l = new label {User<-};
				if (this.store$ actsfor User) {
					try {
						numColor = new Color(0.4, 0.4, 0.4, 1.0);
						tileColor = new Color(0.8, 0.8, 0.8, 1.0);
						sepColor = new Color(0.6, 0.6, 0.6, 1.0);
						colors = new Color native []{
							tileColor, new Color(0.8, 0.8, 0.75, 1.0),
							new Color(0.8, 0.75, 0.75, 1.0), new Color(0.85, 0.75, 0.7, 1.0),
							new Color(0.8, 0.8, 0.7, 1.0), new Color(0.8, 0.7, 0.7, 1.0),
							new Color(0.8, 0.7, 0.6, 1.0), new Color(0.8, 0.6, 0.7, 1.0),
							new Color(0.7, 0.8, 0.7, 1.0), new Color(0.7, 0.8, 0.6, 1.0),
							new Color(0.6, 0.7, 0.8, 1.0), new Color(0.6, 0.6, 0.8, 1.0),
							new Color(0.8, 0.8, 0.5, 1.0), new Color(0.8, 0.7, 0.5, 1.0),
							new Color(0.8, 0.6, 0.5, 1.0), new Color(0.8, 0.5, 0.7, 1.0),
							new Color(0.8, 0.5, 0.5, 1.0)
						};
						numFont = Font.font("Helvetica-Bold", FontWeight.BOLD, 64);
						smallNumFont = Font.font("Helvetica-Bold", FontWeight.BOLD, 32);

						//final Pane[l,l] content = new Pane[l,l]();
						final Group[l,l] outer = new Group[l,l]();
						final Scene[l,l] scene = new Scene[l,l](l, l, outer);

						background = new Rectangle[l,l]();


						//outer.getChildren().add(l, l, background);
						background.setWidth(tileSize);
						background.setHeight(tileSize);
						//background.setFill(tileColor);
						background.setStrokeWidth(0);
						background.setStroke(tileColor);
						background.setArcWidth(tileSize * 0.30);
						background.setArcHeight(tileSize * 0.30);

						Text[{User<-},{User<-}]{User<-} t = new Text[l,l]();
	          //t.setText(this.readBoard());
	          //t.setText("kkkk");
						t.setText("\n" + "Let's play Scrabble!!" + "\n");
	          //t.setFont(new Font(20));
						t.setX(50);
						t.setY(50);
						t.setFont(numFont);
						t.setFill(numColor);
	          outer.getChildren().add(l,l, t);

						primaryStage.setScene(l,l,scene);
						//outer.getChildren().add(l,l,content);

						//content.setStyle("-fx-background-color: #999999");

					} catch (NegativeArraySizeException e) {
						// Impossible
					}
					primaryStage.setTitle("1024");
					primaryStage.show();

					final Store store = FabricWorker.getWorker().getStore("store");

					if (store actsfor User) {
					  String{User<-} ready = "";
						PrintString[{User<-}]{User<-} p = new PrintString[{User<-}]();


						ready += "\n";
						ready += "Let's play Scrabble!!";
						ready += "\n";
						ready += "----------------";
						ready += "\n";

					  Scrabble scrabble = null;
            	/**
						scrabble = new Scrabble[User]@store();
		
			      scrabble.startUser();
						scrabble.gameLoop();
						*/
						//primaryStage.show();

						}
				}



			} catch (Exception exc) {}
		}
	}

}
