import fabricated.util.ArrayList;
import fabricated.util.StringComparator;

/**
 * The class Scrabble is responsible for coordinating gameplay
 * between two Players.
 */
public class Scrabble[principal Game, principal allPlayers] {

  private ArrayList[{Game<-}]{Game<-} players;
  private Bag[Game]{Game<-} bag;
  private int{Game<-} currentPlayer;
  private Board[Game, allPlayers]{Game<-} board;

  public Scrabble{Game<-}(ArrayList[{Game<-}]{Game<-} playersList){
    this.bag = new Bag{Game<-}();
    this.board = new Board{Game<-}();
    this.currentPlayer = 0;
    this.players = playersList;
  }

  /**
  * Initializes the Bag, and the racks of all players in this Scrabble game
  */
  public void startGame{Game<-}(){
    atomic{
      this.bag.populateBag();
      for(int i=0; i<this.players.size();i++){
        ((Player) this.players.get(i)).rack.populateRackTile(this.bag);
      }
    }
  }

  /**
  * Returns true if any player has an empty rack,
  * and false otherwise
  */
  public boolean{Game<-} emptyRack{Game<-} (){
    /**
     for (int{Game<-} i=0; i<this.players.size(); i++){
        String{Game<-} flag = "";
        String{Game<-} blank = "";
        for (int{Game<-} j=0; j<7; j++){
          try{
            Player{Game<-} p = (Player)this.players.get(i);
            flag = flag + p.rack.tiles[j];
          }catch (Exception e){}


        }
        if (flag.equals(blank)){
          return true;
        }
     }
     */
     return false;
  }


  /**
  * Returns the player who has the highest score,
  */
  public int{Game<-} getWinner{Game<-}() {
     int{Game<-} winner = 0;
     Player{Game<-} p = (Player)this.players.get(0);
     if (p != null){
       int{Game<-} highScore = p.score;

       for (int{Game<-} i=1; i<this.players.size(); i++){
          Object{Game<-} ob = this.players.get(i);

          if (ob != null){
            Player{Game<-} r = (Player)ob;
            int{Game<-} score = r.score;
            if(score > highScore){
              highScore = score;
              winner = i;
            }
          }
       }
     }
     return winner;
  }

  /**
  * Runs the Scrabble game
  * the game ends when the number of moves played is equal to 50
  */
  public void gameLoop{Game<-}(){
    atomic{
      while(this.board.moveNumber < 50){
         if (this.emptyRack()){
            int{Game<-} winner = this.getWinner();
            //System.out.println("The winner is player " + (winner) );
            break;
         }
         else{
           //this.print_helper();
           boolean success = false;
           RemoteWorker w1  = ((Player)this.players.get(this.currentPlayer)).w;
           RemoteWorker w2  = ((Player)this.players.get((this.currentPlayer + 1) % this.players.size())).w;

           while (!success){
             // Remote call
              int temp = (this.currentPlayer + 1) % this.players.size();
              //this.readBoard_remote@w2(Worker.getWorker().getPrincipal(), temp);
              //success = this.move_remote@w1(Worker.getWorker().getPrincipal());
           }
          this.currentPlayer = (this.currentPlayer + 1) % this.players.size();
         }
      }
      int{Game<-} winner = this.getWinner();
      //System.out.println("The winner is player " + (winner) );
    }
  }

}
