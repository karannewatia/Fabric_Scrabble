import fabricated.util.ArrayList;
import fabricated.util.StringComparator;
import fabricated.util.IdComparator;
import fabric.util.PrintString;
import fabric.util.ReadInput;
//import fabfx.application.Application;

/**
 * The class Scrabble is responsible for coordinating Userplay
 * between two Players.
 */
public class Scrabble[principal User] authority(User) {

  private ArrayList[{User<-}]{User<-} players;
  //private ArrayList[{User<-}]{User<-} playerPrincipals;
  private ArrayList[{User<-}]{User<-} playerScores;
  private ArrayList[{User<-}]{User<-} playerTilesLeft;

  private Bag[User]{User<-} bag;
  private int{User<-} currentPlayer;
  private Board[User]{User<-} board;
  private transient ReadInput[{User<-}]{User<-} scanner;

  public Scrabble{User<-}(){

    try{

    this.bag = new Bag{User<-}();
    this.board = new Board{User<-}();
    this.currentPlayer = 0;
    this.scanner = new ReadInput[{User<-}]();

    final Store store = FabricWorker.getWorker().getStore("store");

		if (store actsfor User) {
			final Store p1store = FabricWorker.getWorker().getStore("worker");
			final Store p2store = FabricWorker.getWorker().getStore("worker2");
			final principal p1 = p1store.getPrincipal();
			final principal p2 = p2store.getPrincipal();

      RemoteWorker w1 = FabricWorker.getWorker().getWorker("worker");
      RemoteWorker w2 = FabricWorker.getWorker().getWorker("worker2");
      Player[User, p1]{User<-} alice = new Player{User<-}(w1);
      Player[User, p2]{User<-} bob = new Player{User<-}(w2);

      this.players = new ArrayList[{User<-}]{User<-}(new StringComparator{User<-}());
      this.players.add(alice);
      this.players.add(bob);

    }

    this.playerTilesLeft = new ArrayList[{User<-}]{User<-}(new IdComparator{User<-}());
    this.playerTilesLeft.add(new Integer(7));
    this.playerTilesLeft.add(new Integer(7));

    this.playerScores = new ArrayList[{User<-}]{User<-}(new IdComparator{User<-}());
    this.playerScores.add(new Integer(0));
    this.playerScores.add(new Integer(0));
    } catch (Exception exc) {}
  }

  /**
  * Initializes the Bag, and the racks of all players in this Scrabble User
  */
  public void startUser{User<-}(){
    atomic{
      this.bag.populateBag();
      for(int i=0; i<this.players.size();i++){
        ((Player) this.players.get(i)).rack.populateRackTile(this.bag);
      }
    }
  }

  /**
  * Returns true if the current player has an empty rack,
  * and false otherwise
  */
  public boolean{User<-} emptyRack{User<-}() {
     boolean{User<-} result = false;
     Integer tilesLeft = (Integer)this.playerTilesLeft.get(this.currentPlayer);

      if (tilesLeft.intValue() == 0){
        result = true;
        return result;
      }
     return result;
  }

  /**
  * Increments the score of player based on tiles
  */
  public void incScore{User<-}(String{User<-}tiles){
    atomic{
      for(int i =0; i< tiles.length(); i++){
        String{User<-} tile = Character.toString(tiles.charAt(i));
        Integer{User<-} temp = (Integer)this.board.points.get(tile);
        this.playerScores.set(this.currentPlayer, new Integer(((Integer)this.playerScores.get(this.currentPlayer)).intValue() + temp.intValue()));
      }
      if (tiles.length() == 7){
        this.playerScores.set(this.currentPlayer, new Integer(((Integer)this.playerScores.get(this.currentPlayer)).intValue() + 50));
      }
    }
  }

  /**
  * Returns the player who has the highest score,
  */
  public int{} getWinner{User<-}() {
     int winner = 0;
     int highScore = 0;
     Integer score0 = (Integer)this.playerScores.get(0);
     highScore = score0.intValue();

     for (int i=1; i<this.playerScores.size(); i++){
        //final principal pr =  (Principal)this.playerPrincipals.get(i);
        //Player{User<-} p = (Player[User, pr])this.players.get(i);

        Integer temp = (Integer)this.playerScores.get(i);
        int score = temp.intValue();
        if(score > highScore){
          highScore = score;
          winner = i;
        }
     }
     return winner;
  }

  /**
  * GUI for swap
  */
  public String{User<-} swapGui{User<-} (){
    String{User<-} word = "";
    PrintString[{User<-}]{User<-} p = new PrintString[{User<-}]();
    p.print("type in the letters you want to swap");

    try{
      word = this.scanner.read();
      p.print("The letters you wish to swap are: " + word);
    } catch (Exception e) {
      //print
    }
    return word;
  }

  /**
  * helper function for the swap move for a player
  */
  public boolean{User<-} swap{User<-}(){
    boolean{User<-} success = false;

    String{User<-} word = this.swapGui();
    String{User<-}[]{User<-} letters = new String[word.length()];
    for(int i=0; i < letters.length; i++){
       letters[i] = Character.toString(word.charAt(i));
    }



    //String{User<-} rackCopy = endorse (((Player)this.players.get(this.currentPlayer)).getRack(), {} to {User<-});
    //if (this.board.hasTilesinRack(rackCopy, word)){
    //  p.print("some of the letters which you want to swap are not in your rack");
    //}

    PrintString[{User->; User<-}]{User->; User<-} p = new PrintString[{User->; User<-}]();
    if (this.bag.tiles.size() < letters.length){
       p.print("The bag does not have enough tiles left");
    }

    atomic{
      ((Player) this.players.get(this.currentPlayer)).rack.swapTiles(letters, this.bag);
      success = true;
     }
     return success;
   }

   /**
  * helper function for the place move for a player
  */
  public boolean{User<-} place{User<-}() where authority (User){

    boolean{User<-} success = false;

    PrintString[{User<-}]{User<-} p = new PrintString[{User<-}]();
    p.print("word formed");

    String{User<-} word = "";

    try{
      word = this.scanner.read();
      p.print("The word you wish to form is: " + word);
    } catch (Exception e) {
      //print
    }

     p.print("type in the direction: h or v");
     boolean{User<-} dir = true;
     String{User<-} dirString = "";

     try{
       dirString = this.scanner.read();
       p.print("Your chosen direction: " + dirString);
     } catch (Exception e) {
       //print
     }
     if (dirString.equals("v")){
       dir = false;
     }

     String{User<-} rowString = "";
     p.print("type in the row number");
     try{
      rowString = this.scanner.read();
      p.print("Your chosen row number: " + rowString);
     } catch (Exception e) {
       //print
     }

     String{User<-} colString = "";
     p.print("type in the column number");
     try{
      colString = this.scanner.read();
      p.print("Your chosen column number: " + colString);
     } catch (Exception e) {
       //print
     }

     int{User<-} row = Integer.parseInt(rowString);
     int{User<-} col = Integer.parseInt(colString);

     // Now try to place it
     String{User<-} newEntries = this.board.getNewEntries(word, dir, row, col);

     String{User<-} rackCopy = endorse (((Player)this.players.get(this.currentPlayer)).getRack(), {} to {User<-});
     //String{User<-} rackCopy = "";
     String{User<-} toSwap = this.board.swapTiles(rackCopy, newEntries);

     atomic{
       if (this.board.isMoveValid(rackCopy, word, newEntries, dir, row, col)){
         this.board.placeWord(word, dir, row, col);
         String{User<-}[]{User<-} letters = new String[toSwap.length()];
         for(int i=0; i < letters.length; i++){
            letters[i] = Character.toString(word.charAt(i));
         }
         this.incScore(toSwap);
         ((Player) this.players.get(this.currentPlayer)).rack.swapTiles(letters, this.bag);

         this.board.moveNumber++;
         success = true;
       }
    }
    return success;
  }


  /**
  * Helper function move.
  * calls the relevant functions using moveType
  */
  public boolean{User<-} moveHelper{User<-}(String{User<-} moveType){
    boolean{User<-} success = false;
    PrintString[{User<-}]{User<-} p = new PrintString[{User<-}]();
    atomic{
      if (moveType.equals("swap")){
        return this.swap();
        //return success;
      }
      else if (moveType.equals("place")){
        return this.place();
        //return success;
      }
      else if (moveType.equals("pass")){
        success = true;
        p.print("turn passed");
        return success;
      }
    }
    p.print("try again");
    return success;

  }

  public String{User<-} moveGui{User<-}(){
    PrintString[{User<-}]{User<-} p = new PrintString[{User<-}]();
    p.print("type in move type");
    String{User<-} moveType = "";

    try{
      moveType = this.scanner.read();
      p.print("Your chosen move type: " + moveType);
    } catch (Exception e) {
      //print
    }
    //p.print(moveType);
    return moveType;
  }

  public boolean{User<-} move{User<-}(){
    //this.readBoard(this.currentPlayer);
    boolean{User<-} result = false;
    String{User<-} moveType = this.moveGui();
    PrintString[{User<-}]{User<-} p = new PrintString[{User<-}]();

    if (moveType==null) return false;

    if (this.moveHelper(moveType)==true){
       return true;
     }
    return false;
  }

  public void printRack{User<-}(int{User<-} playerNum) {
    PrintString[{}]{User<-} r = new PrintString[{}]();
    String rack = "Your rack: " + ((Player)this.players.get(playerNum)).getRack() + "\n";
    r.print(rack);
  }

  /**
  * Prints the User board for every turn
  */
  //public void readBoard{*->_}(){
  public void readBoard{User<-}(){
    String printBoard = "";
    atomic{
      printBoard += "\n";
      printBoard += "  "; //beginning 2 spaces
      for(int i = 0; i < this.board.UserBoard.length; ++i){
        if(i>9) printBoard += " " + (i) + " "; //print letters separately.
        else printBoard += " " + (i) +"  "; //print letters separately.
      }
      for(int i = 0; i < this.board.UserBoard.length; i++){
        printBoard += "\n";
        for(int j = 0; j < this.board.UserBoard.length; j++){
            if(j == 0){
                if(i>9) {
                  printBoard += i;
                  printBoard += "| ";
                } else {
                  printBoard += " " + i;
                  printBoard += "| ";
                }
            }
            printBoard += (String)(this.board.UserBoard[i].get(j)) + " | ";
          }
        }
        printBoard += "\n" + "\n" + "Player " + this.currentPlayer + "'s turn \n";
        printBoard += "Your score: " + ((Integer)this.playerScores.get(this.currentPlayer)).intValue() + "\n";

    }
      PrintString[{}] p = new PrintString[{}]();
      p.print(printBoard);
  }


  /**
  * Runs the Scrabble User
  * the User ends when the number of moves played is equal to 50
  */
  public void gameLoop{User<-}() where caller(User){
    atomic{
      //if (User actsFor User) {
      while(this.board.moveNumber < 50){
         //new Test().launchApp();
         PrintString[{User<-}]{User<-} p = new PrintString[{User<-}]();
         this.readBoard();

         boolean{User<-} success = false;
         //final RemoteWorker w1  = ((Player)this.players.get(this.currentPlayer)).w;
         //final RemoteWorker w2  = ((Player)this.players.get((this.currentPlayer + 1) % this.players.size())).w;

         PrintString[{}]{User<-} r = new PrintString[{}]();
         //String rack = "Your rack: " + ((Player)this.players.get(this.currentPlayer)).getRack() + "\n";
         //r.print(rack);
         this.printRack(this.currentPlayer);

         while (!success){
           // Remote call
            //this.readBoard@w2();
            //this.readBoard@w1();

            //success = this.move@w1();
            success = this.move();
         }
         if (this.emptyRack()){
            int winner = this.getWinner();
            String winnerStr = String.valueOf(winner);
            r.print("The winner is player " + winnerStr + "\n");
            break;
         }
         this.currentPlayer = (this.currentPlayer + 1) % this.players.size();
      }
      int winner = this.getWinner();
      String winnerStr = String.valueOf(winner);
      PrintString[{}]{User<-} r = new PrintString[{}]();
      r.print("\n" + "The winner is player " + winnerStr + "\n");
    //}
   }
  }

}
