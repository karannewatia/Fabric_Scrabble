import fabric.util.RandomGenerator;
import fabric.util.PrintString;
import fabricated.util.ArrayList;
import fabricated.util.StringComparator;

/**
 * This class represents the bag in the Scrabble game.
 */
// This is a class that can act with the Game server's authority.  Any code
// constructing a Bag must also be acting with the Game server's authority.
public class Bag[principal Game] authority(Game) {

    public ArrayList[{Game->; Game<-}]{Game->; Game<-} tiles;

    private int[]{Game<-} counts;

    private transient RandomGenerator[{Game->; Game<-}]{Game<-}  random;

    public int{Game<-} numTiles;

    public Bag{Game<-}(){
    try{
      this.tiles = new ArrayList{Game->; Game<-}();
      }
    catch (IllegalArgumentException exc){

    }
    this.counts = new int[]{2,9,2,2,4,12,2,3,2,9,1,1,4,2,6,8,2,1,6,4,6,4,2,2,1,2,1};

    this.random = new RandomGenerator[{Game->; Game<-}]();
    this.numTiles = 100;

    }

   /**
    * Initializes the bag with tiles using the counts array
    */
    public void populateBag{Game<-}(){
       atomic{
         String{Game<-; Game->} temp;
         for(int i=0; i < counts.length; i++){
             for(int j=0; j < counts[i]; j++) {

              temp = i == 0 ? "*" : Character.toString((char)('a' + i - 1));
              this.tiles.add(temp);
           }
         }
       }
    }

    public String{Game<-; Game->player} getTilePlayer{Game<-; Game->player}(principal player)
      // This should only be called by code that has the Game server's authority
      where authority (Game) {
      if (this.tiles.isEmpty()){
        throw new Error("bag is empty");
      }
      String{Game<-; Game->player}  result = null;

      atomic{
        //int rand_value = this.tiles.size()-1;
        int rand_value = this.random.nextInt(this.tiles.size());

        String{Game<-; Game->}  tile =  (String) this.tiles.get(rand_value);
        try{
         this.tiles.remove(rand_value);
        } catch (Exception e) {
          //print
        }
        result = declassify(tile, {Game->; Game<-} to {Game->player; Game<-});
      }
      return result;
    }

    /**
    * Returns a random tile from Bag,
    * removes this tile from Bag,
    * and adds the input tile to the Bag
    */
    public String{Game<-; Game->player} swapTile{Game<-; Game->player}(String {Game<-; Game->player} tile, principal player)
    // This should only be called by code that has the Game server's authority
    where authority (Game) {
      atomic{
        String{Game<-; Game->player} newTile = getTilePlayer(player);
        try {
          this.tiles.add(tile);
          // Change the below to log an error or something to avoid making a bug
          // go silently unnoticed
        } catch (Exception e) {
          //print
        }
        return newTile;
      }
    }

}
